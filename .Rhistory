install.packages("kernlab")
library(kernlab)
svm <- ksvm(pa ~ bio1+bio5+bio6+bio7+bio8+bio12+bio16+bio17, data=envtrain)
esv <- evaluate(testpres, testbackg, svm)
esv
ps <- predict(predictors, svm, ext=ext)
par(mfrow=c(1,2))
plot(ps, main='Support Vector Machine')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(esv, 'spec_sens')
plot(ps > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
predictors
file
brandyus
brandypus
bradypus
backgr
pb
presvals
rep(1, nrow(presvals))
sdmdata
class(sdmdata)
source('~/Stevens/en-250/en250Final/modelingMethodsSetup.R')
##########
# Maxent #
##########
maxent()
xm <- maxent(predictors, pres_train, factors='biome')
plot(xm)
response(xm)
e <- evaluate(pres_test, backg_test, xm, predictors)
e
px <- predict(predictors, xm, ext=ext, progress='')
par(mfrow=c(1,2))
plot(px, main='Maxent, raw values')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(e, 'spec_sens')
plot(px > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
#################
# Random Forest #
#################
install.packages("randomForest")
library(randomForest)
model <- pa ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf1 <- randomForest(model, data=envtrain)
model <- factor(pa) ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf2 <- randomForest(model, data=envtrain)
rf3 <- randomForest(envtrain[,1:8], factor(pb_train))
source('~/Stevens/en-250/en250Final/modelingMethodsSetup.R')
install.packages("randomForest")
library(randomForest)
model <- pa ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf1 <- randomForest(model, data=envtrain)
#train <- rbind(pres_train, backg_train)
#pb_train <- c(rep(1, nrow(pres_train)), rep(0, nrow(backg_train)))
envtrain <- extract(predictors, train)
envtrain <- data.frame( cbind(pa=pb_train, envtrain) )
envtrain[,'biome'] = factor(envtrain[,'biome'], levels=1:14)
train <- rbind(pres_train, backg_train)
pb_train <- c(rep(1, nrow(pres_train)), rep(0, nrow(backg_train)))
envtrain <- extract(predictors, train)
envtrain <- data.frame( cbind(pa=pb_train, envtrain) )
envtrain[,'biome'] = factor(envtrain[,'biome'], levels=1:14)
source('~/Stevens/en-250/en250Final/modelingMethodsSetup.R')
#################
# Random Forest #
#################
#install.packages("randomForest")
library(randomForest)
model <- pa ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf1 <- randomForest(model, data=envtrain)
model <- factor(pa) ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf2 <- randomForest(model, data=envtrain)
rf3 <- randomForest(envtrain[,1:8], factor(pb_train))
erf <- evaluate(testpres, testbackg, rf1)
erf
source('~/Stevens/en-250/en250Final/modelingMethodsSetup.R')
#################
# Random Forest #
#################
#install.packages("randomForest")
library(randomForest)
model <- pa ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf1 <- randomForest(model, data=envtrain)
model <- factor(pa) ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf2 <- randomForest(model, data=envtrain)
rf3 <- randomForest(envtrain[,1:8], factor(pb_train))
erf <- evaluate(testpres, testbackg, rf1)
erf
pr <- predict(predictors, rf1, ext=ext)
par(mfrow=c(1,2))
plot(pr, main='Random Forest, regression')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(erf, 'spec_sens')
#################
# Random Forest #
#################
#install.packages("randomForest")
library(randomForest)
model <- pa ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf1 <- randomForest(model, data=envtrain)
model <- factor(pa) ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf2 <- randomForest(model, data=envtrain)
rf3 <- randomForest(envtrain[,1:8], factor(pb_train))
erf <- evaluate(testpres, testbackg, rf1)
erf
pr <- predict(predictors, rf1, ext=ext)
par(mfrow=c(1,2))
par(mar=c(1,1,1,1))
plot(pr, main='Random Forest, regression')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(erf, 'spec_sens')
plot(pr > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
par(mar=c(1,2))
par(mar=c(1,2,1,2))
par(mar=c(1,2))
par(mfrow=c(1,2))
source('~/Stevens/en-250/en250Final/modelingMethodsSetup.R')
##########
# Maxent #
##########
maxent()
##########
# Maxent #
##########
maxent()
.jintit()
.jinit()
#################
# Random Forest #
#################
#install.packages("randomForest")
library(randomForest)
model <- pa ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf1 <- randomForest(model, data=envtrain)
model <- factor(pa) ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf2 <- randomForest(model, data=envtrain)
rf3 <- randomForest(envtrain[,1:8], factor(pb_train))
erf <- evaluate(testpres, testbackg, rf1)
erf
pr <- predict(predictors, rf1, ext=ext)
par(mfrow=c(1,2))
plot(pr, main='Random Forest, regression')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(erf, 'spec_sens')
plot(pr > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
###########################
# Support Vector Machines #
###########################
install.packages("kernlab")
library(kernlab)
svm <- ksvm(pa ~ bio1+bio5+bio6+bio7+bio8+bio12+bio16+bio17, data=envtrain)
esv <- evaluate(testpres, testbackg, svm)
esv
ps <- predict(predictors, svm, ext=ext)
par(mfrow=c(1,2))
plot(ps, main='Support Vector Machine')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(esv, 'spec_sens')
plot(ps > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
###########
# Bioclim #
###########
bc <- bioclim(pred_nf, pres_train)
plot(bc, a=1, b=2, p=0.85)
e <- evaluate(pres_test, backg_test, bc, pred_nf)
e
tr <- threshold(e, 'spec_sens')
tr
pb <- predict(pred_nf, bc, ext=ext, progress='')
pb
par(mfrow=c(1,2))
plot(pb, main='Bioclim, raw values')
plot(wrld_simpl, add=TRUE, border='dark grey')
plot(pb > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
##########
# Domain #
##########
dm <- domain(pred_nf, pres_train)
e <- evaluate(pres_test, backg_test, dm, pred_nf)
##########
# Domain #
##########
dm <- domain(pred_nf, pres_train)
e <- evaluate(pres_test, backg_test, dm, pred_nf)
e
pd = predict(pred_nf, dm, ext=ext, progress='')
par(mfrow=c(1,2))
plot(pd, main='Domain, raw values')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(e, 'spec_sens')
plot(pd > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
########################
# Mahalanobis distance #
########################
mm <- mahal(pred_nf, pres_train)
e <- evaluate(pres_test, backg_test, mm, pred_nf)
e
pm = predict(pred_nf, mm, ext=ext, progress='')
par(mfrow=c(1,2))
pm[pm < -10] <- -10
plot(pm, main='Mahalanobis distance')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(e, 'spec_sens')
plot(pm > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
#############################
# Generalized Linear Models #
#############################
# Bionmial GLM #
gm1 <- glm(pa ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17,
family = binomial(link = "logit"), data=envtrain)
#summary(gm1)
#coef(gm1)
ge1 <- evaluate(testpres, testbackg, gm1)
ge1
pg1 <- predict(predictors, gm1, ext=ext)
par(mfrow=c(1,2))
plot(pg1, main='GLM/binomial, raw values')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(ge1, 'spec_sens')
plot(pg1 > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
# Gaussian GLM #
gm2 <- glm(pa ~ bio1+bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17,
family = gaussian(link = "identity"), data=envtrain)
ge2 <- evaluate(testpres, testbackg, gm2)
ge2
pg2 <- predict(predictors, gm2, ext=ext)
par(mfrow=c(1,2))
plot(pg2, main='GLM/gaussian, raw values')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(ge2, 'spec_sens')
plot(pg2 > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
# Poisson GLM #
gm3 <- glm(pa ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17,
family = poisson(link = "log"), data=envtrain)
ge3 <- evaluate(testpres, testbackg, gm3)
ge3
pg3 <- predict(predictors, gm3, ext=ext)
par(mfrow=c(1,2))
plot(pg3, main='GLM/poisson, raw values')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(ge3, 'spec_sens')
plot(pg3 > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
##########
# Maxent #
##########
# If this is your first time running the code, download the
# required java package for Maxent at the link below
# https://biodiversityinformatics.amnh.org/open_source/maxent/
# Then unzip the files into your \R\win-library\4.0\dismo\java
# directory
maxent()
# Random Forest #
# Random Forest #
# Random Forest #
#################
# Random Forest #
#################
# Uncomment the line below if it is your first time
# running the code on this machine
#install.packages("randomForest")
library(randomForest)
model <- pa ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf1 <- randomForest(model, data=envtrain)
model <- factor(pa) ~ bio1 + bio5 + bio6 + bio7 + bio8 + bio12 + bio16 + bio17
rf2 <- randomForest(model, data=envtrain)
rf3 <- randomForest(envtrain[,1:8], factor(pb_train))
erf <- evaluate(testpres, testbackg, rf1)
erf
pr <- predict(predictors, rf1, ext=ext)
par(mfrow=c(1,2))
plot(pr, main='Random Forest, regression')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(erf, 'spec_sens')
plot(pr > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
###########################
# Support Vector Machines #
###########################
# Uncomment the line below if it is your first time
# running the code on this machine
#install.packages("kernlab")
library(kernlab)
svm <- ksvm(pa ~ bio1+bio5+bio6+bio7+bio8+bio12+bio16+bio17, data=envtrain)
esv <- evaluate(testpres, testbackg, svm)
esv
ps <- predict(predictors, svm, ext=ext)
par(mfrow=c(1,2))
plot(ps, main='Support Vector Machine')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(esv, 'spec_sens')
plot(ps > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
##########
# Maxent #
##########
# If this is your first time running the code, download the
# required java package for Maxent at the link below
# https://biodiversityinformatics.amnh.org/open_source/maxent/
# Then unzip the files into your \R\win-library\4.0\dismo\java
# directory
maxent()
xm <- maxent(predictors, pres_train, factors='biome')
javac -version
##########
# Maxent #
##########
# If this is your first time running the code, download the
# required java package for Maxent at the link below
# https://biodiversityinformatics.amnh.org/open_source/maxent/
# Then unzip the files into your \R\win-library\4.0\dismo\java
# directory
maxent()
library(rJava)
##########
# Maxent #
##########
# If this is your first time running the code, download the
# required java package for Maxent at the link below
# https://biodiversityinformatics.amnh.org/open_source/maxent/
# Then unzip the files into your \R\win-library\4.0\dismo\java
# directory
maxent()
maxent()
library('dismo')
maxent()
maxent()
maxent()
library(dismo)
maxent()
source("modelingMethodsSetup.R")
##########
# Maxent #
##########
# If this is your first time running the code, download the
# required java package for Maxent at the link below
# https://biodiversityinformatics.amnh.org/open_source/maxent/
# Then unzip the files into your \R\win-library\4.0\dismo\java
# directory
maxent()
xm <- maxent(predictors, pres_train, factors='biome')
plot(xm)
response(xm)
e <- evaluate(pres_test, backg_test, xm, predictors)
e
px <- predict(predictors, xm, ext=ext, progress='')
par(mfrow=c(1,2))
plot(px, main='Maxent, raw values')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(e, 'spec_sens')
plot(px > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
library(dismo)
sdmdata <- readRDS("sdm.Rds")
presvals <- readRDS("pvals.Rds")
pres <- sdmdata[sdmdata[,1] == 1, 2:9]
source('~/Stevens/en-250/en250Final/modelingMethodsSetup.R')
source('~/Stevens/en-250/en250Final/modelingMethodsSetup.R')
library(dismo)
sdmdata <- readRDS("sdm.Rds")
presvals <- readRDS("pvals.Rds")
pres <- sdmdata[sdmdata[,1] == 1, 2:9]
back <- sdmdata[sdmdata[,1] == 0, 2:9]
k <- 5
group <- kfold(pres, k)
group[1:10]
unique(group)
e <- list()
for (i in 1:k) {
train <- pres[group != i,]
test <- pres[group == i,]
bc <- bioclim(train)
e[[i]] <- evaluate(p=test, a=back, bc)
}
auc <- sapply(e, function(x){x@auc})
auc
mean(auc)
sapply( e, function(x){ threshold(x)['spec_sens'] } )
# Removing spatial sorting bias
file <- file.path(system.file(package="dismo"), "ex/bradypus.csv")
bradypus <- read.table(file,  header=TRUE,  sep=',')
bradypus <- bradypus[,-1]
presvals <- extract(predictors, bradypus)
set.seed(0)
backgr <- randomPoints(predictors, 500)
nr <- nrow(bradypus)
s <- sample(nr, 0.25 * nr)
pres_train <- bradypus[-s, ]
pres_test <- bradypus[s, ]
nr <- nrow(backgr)
set.seed(9)
s <- sample(nr, 0.25 * nr)
back_train <- backgr[-s, ]
back_test <- backgr[s, ]
sb <- ssb(pres_test, back_test, pres_train)
sb[,1] / sb[,2]
i <- pwdSample(pres_test, back_test, pres_train, n=1, tr=0.1)
pres_test_pwd <- pres_test[!is.na(i[,1]), ]
back_test_pwd <- back_test[na.omit(as.vector(i)), ]
sb2 <- ssb(pres_test_pwd, back_test_pwd, pres_train)
sb2[1]/ sb2[2]
bc <- bioclim(predictors, pres_train)
evaluate(bc, p=pres_test, a=back_test, x=predictors)
evaluate(bc, p=pres_test_pwd, a=back_test_pwd, x=predictors)
source('~/Stevens/en-250/en250Final/modelingMethodsSetup.R')
# Removing spatial sorting bias
nr <- nrow(bradypus)
s <- sample(nr, 0.25 * nr)
pres_train <- bradypus[-s, ]
pres_test <- bradypus[s, ]
nr <- nrow(backgr)
set.seed(9)
s <- sample(nr, 0.25 * nr)
back_train <- backgr[-s, ]
back_test <- backgr[s, ]
sb <- ssb(pres_test, back_test, pres_train)
sb[,1] / sb[,2]
i <- pwdSample(pres_test, back_test, pres_train, n=1, tr=0.1)
pres_test_pwd <- pres_test[!is.na(i[,1]), ]
back_test_pwd <- back_test[na.omit(as.vector(i)), ]
sb2 <- ssb(pres_test_pwd, back_test_pwd, pres_train)
sb2[1]/ sb2[2]
bc <- bioclim(predictors, pres_train)
evaluate(bc, p=pres_test, a=back_test, x=predictors)
evaluate(bc, p=pres_test_pwd, a=back_test_pwd, x=predictors)
bradypus
nrow(bradypus)
s
nr
nr
nrow(bradypus)
sb
ssb(pres_test, back_test, pres_train)
sb[,1] / sb[,2]
sb2[1]/ sb2[2]
source('~/Stevens/en-250/en250Final/modelingMethodsSetup.R')
library(dismo)
# Loading fitted data from modeling setup script
sdmdata <- readRDS("sdm.Rds")
presvals <- readRDS("pvals.Rds")
# Creating presence and background datasets
pres <- sdmdata[sdmdata[,1] == 1, 2:9]
back <- sdmdata[sdmdata[,1] == 0, 2:9]
# Paritioning presence data into 5 groups
# One group will be used for evaluating the model
# While the other four will be for fitting the model
k <- 5
group <- kfold(pres, k)
group[1:10]
unique(group)
# Resulting of the evaluations will be stored
# in 'e'
e <- list()
for (i in 1:k) {
train <- pres[group != i,]
test <- pres[group == i,]
bc <- bioclim(train)
e[[i]] <- evaluate(p=test, a=back, bc)
}
# From 'e' we can extract the AUC values and
# the “maximum of the sum of the sensitivity
# and specificity ” threshold (spec_sens)
auc <- sapply(e, function(x){x@auc})
auc
mean(auc)
sapply( e, function(x){ threshold(x)['spec_sens']})
# Removing spatial sorting bias
i <- pwdSample(pres_test, back_test, pres_train, n=1, tr=0.1)
# Removing spatial sorting bias
i <- pwdSample(pres_test, backg_test, pres_train, n=1, tr=0.1)
pres_test_pwd <- pres_test[!is.na(i[,1]), ]
backg_test_pwd <- backg_test[na.omit(as.vector(i)), ]
sb2 <- ssb(pres_test_pwd, backg_test_pwd, pres_train)
sb2[1]/ sb2[2]
bc <- bioclim(predictors, pres_train)
evaluate(bc, p=pres_test, a=backg_test, x=predictors)
evaluate(bc, p=pres_test_pwd, a=backg_test_pwd, x=predictors)
evaluate(bc, p=pres_test, a=backg_test, x=predictors)
evaluate(bc, p=pres_test_pwd, a=backg_test_pwd, x=predictors)
